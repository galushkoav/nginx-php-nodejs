user www-data;
worker_processes 2;
worker_rlimit_nofile 8192;
events {
worker_connections 2048; 
use epoll; 
}
 
http {

    server_names_hash_max_size 2048;
    server_names_hash_bucket_size 512;
    resolver 8.8.8.8;
    server_tokens off;
 
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 10;
    ignore_invalid_headers on;
    client_max_body_size 40m;

geoip_country /etc/nginx/GEO/GeoIP.dat;
geoip_city    /etc/nginx/GEO/GeoIPCity.dat;


proxy_set_header GEOIP_COUNTRY_CODE $geoip_country_code;
proxy_set_header GEOIP_COUNTRY_CODE3 $geoip_country_code3;
proxy_set_header GEOIP_COUNTRY_NAME $geoip_city_country_name;
proxy_set_header GEOIP_CITY_COUNTRY_CODE $geoip_city_country_code;
proxy_set_header GEOIP_CITY_COUNTRY_CODE3 $geoip_city_country_code3;
proxy_set_header GEOIP_CITY_COUNTRY_NAME $geoip_city_country_name;
proxy_set_header GEOIP_REGION $geoip_region;
proxy_set_header GEOIP_CITY $geoip_city;
proxy_set_header GEOIP_POSTAL_CODE $geoip_postal_code;
proxy_set_header GEOIP_CITY_CONTINENT_CODE $geoip_city_continent_code;
proxy_set_header GEOIP_LATITUDE $geoip_latitude;
proxy_set_header GEOIP_LONGITUDE $geoip_longitude;



##Модули логирования прометея
     vhost_traffic_status_zone;
#vhost_traffic_status_filter_by_set_key $filter_user_agent agent::*;
vhost_traffic_status_filter_by_host on;
    map $http_user_agent $filter_user_agent {
        default 'unknown';
        ~iPhone ios;
        ~Android android;
        ~(MSIE|Mozilla) windows;
    }
lua_shared_dict prometheus_metrics 10M;
lua_package_path "/etc/nginx/nginx-lua-prometheus/?.lua";
init_by_lua '
  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
  metric_connections = prometheus:gauge(
    "nginx_http_connections", "Number of HTTP connections", {"state"})
';
log_by_lua '
  local host = ngx.var.host:gsub("^www.", "")
  metric_requests:inc(1, {host, ngx.var.status})
  metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
';
# Gzip on
    gzip                            on;
    gzip_buffers                    32 16k;
    gzip_comp_level                 9;
    gzip_min_length                 20;
    gzip_http_version               1.1;
    gzip_proxied                    expired;
    gzip_types                      text/plain 
                                    text/css 
                                    image/x-icon 
                                    image/bmp 
                                    image/png 
                                    image/gif 
                                    image/jpeg 
                                    image/jpg 
                                    application/json 
                                    application/x-javascript 
                                    text/javascript;
    charset                         utf-8;  
    gzip_disable "msie6";



include "logs.conf";

# Website Includes
include "/etc/nginx/conf.d/*.conf";

}